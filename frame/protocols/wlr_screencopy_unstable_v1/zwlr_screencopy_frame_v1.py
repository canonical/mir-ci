# This file has been autogenerated by the pywayland scanner

# Copyright © 2018 Simon Ser
# Copyright © 2019 Andri Yngvason
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice (including the next
# paragraph) shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

from __future__ import annotations

import enum

from pywayland.protocol_core import (
    Argument,
    ArgumentType,
    Global,
    Interface,
    Proxy,
    Resource,
)
from ..wayland import WlBuffer


class ZwlrScreencopyFrameV1(Interface):
    """A frame ready for copy

    This object represents a single frame.

    When created, a series of buffer events will be sent, each representing a
    supported buffer type. The "buffer_done" event is sent afterwards to
    indicate that all supported buffer types have been enumerated. The client
    will then be able to send a "copy" request. If the capture is successful,
    the compositor will send a "flags" followed by a "ready" event.

    For objects version 2 or lower, :class:`~pywayland.protocol.wayland.WlShm`
    buffers are always supported, ie. the "buffer" event is guaranteed to be
    sent.

    If the capture failed, the "failed" event is sent. This can happen anytime
    before the "ready" event.

    Once either a "ready" or a "failed" event is received, the client should
    destroy the frame.
    """

    name = "zwlr_screencopy_frame_v1"
    version = 3

    class error(enum.IntEnum):
        already_used = 0
        invalid_buffer = 1

    class flags(enum.IntFlag):
        y_invert = 1


class ZwlrScreencopyFrameV1Proxy(Proxy[ZwlrScreencopyFrameV1]):
    interface = ZwlrScreencopyFrameV1

    @ZwlrScreencopyFrameV1.request(
        Argument(ArgumentType.Object, interface=WlBuffer),
    )
    def copy(self, buffer: WlBuffer) -> None:
        """Copy the frame

        Copy the frame to the supplied buffer. The buffer must have a the
        correct size, see :func:`ZwlrScreencopyFrameV1.buffer()` and
        :func:`ZwlrScreencopyFrameV1.linux_dmabuf()`. The buffer needs to have
        a supported format.

        If the frame is successfully copied, a "flags" and a "ready" events are
        sent. Otherwise, a "failed" event is sent.

        :param buffer:
        :type buffer:
            :class:`~pywayland.protocol.wayland.WlBuffer`
        """
        self._marshal(0, buffer)

    @ZwlrScreencopyFrameV1.request()
    def destroy(self) -> None:
        """Delete this object, used or not

        Destroys the frame. This request can be sent at any time by the client.
        """
        self._marshal(1)
        self._destroy()

    @ZwlrScreencopyFrameV1.request(
        Argument(ArgumentType.Object, interface=WlBuffer),
        version=2,
    )
    def copy_with_damage(self, buffer: WlBuffer) -> None:
        """Copy the frame when it's damaged

        Same as copy, except it waits until there is damage to copy.

        :param buffer:
        :type buffer:
            :class:`~pywayland.protocol.wayland.WlBuffer`
        """
        self._marshal(2, buffer)


class ZwlrScreencopyFrameV1Resource(Resource):
    interface = ZwlrScreencopyFrameV1

    @ZwlrScreencopyFrameV1.event(
        Argument(ArgumentType.Uint),
        Argument(ArgumentType.Uint),
        Argument(ArgumentType.Uint),
        Argument(ArgumentType.Uint),
    )
    def buffer(self, format: int, width: int, height: int, stride: int) -> None:
        """Wl_shm buffer information

        Provides information about :class:`~pywayland.protocol.wayland.WlShm`
        buffer parameters that need to be used for this frame. This event is
        sent once after the frame is created if
        :class:`~pywayland.protocol.wayland.WlShm` buffers are supported.

        :param format:
            buffer format
        :type format:
            `ArgumentType.Uint`
        :param width:
            buffer width
        :type width:
            `ArgumentType.Uint`
        :param height:
            buffer height
        :type height:
            `ArgumentType.Uint`
        :param stride:
            buffer stride
        :type stride:
            `ArgumentType.Uint`
        """
        self._post_event(0, format, width, height, stride)

    @ZwlrScreencopyFrameV1.event(
        Argument(ArgumentType.Uint),
    )
    def flags(self, flags: int) -> None:
        """Frame flags

        Provides flags about the frame. This event is sent once before the
        "ready" event.

        :param flags:
            frame flags
        :type flags:
            `ArgumentType.Uint`
        """
        self._post_event(1, flags)

    @ZwlrScreencopyFrameV1.event(
        Argument(ArgumentType.Uint),
        Argument(ArgumentType.Uint),
        Argument(ArgumentType.Uint),
    )
    def ready(self, tv_sec_hi: int, tv_sec_lo: int, tv_nsec: int) -> None:
        """Indicates frame is available for reading

        Called as soon as the frame is copied, indicating it is available for
        reading. This event includes the time at which presentation happened
        at.

        The timestamp is expressed as tv_sec_hi, tv_sec_lo, tv_nsec triples,
        each component being an unsigned 32-bit value. Whole seconds are in
        tv_sec which is a 64-bit value combined from tv_sec_hi and tv_sec_lo,
        and the additional fractional part in tv_nsec as nanoseconds. Hence,
        for valid timestamps tv_nsec must be in [0, 999999999]. The seconds
        part may have an arbitrary offset at start.

        After receiving this event, the client should destroy the object.

        :param tv_sec_hi:
            high 32 bits of the seconds part of the timestamp
        :type tv_sec_hi:
            `ArgumentType.Uint`
        :param tv_sec_lo:
            low 32 bits of the seconds part of the timestamp
        :type tv_sec_lo:
            `ArgumentType.Uint`
        :param tv_nsec:
            nanoseconds part of the timestamp
        :type tv_nsec:
            `ArgumentType.Uint`
        """
        self._post_event(2, tv_sec_hi, tv_sec_lo, tv_nsec)

    @ZwlrScreencopyFrameV1.event()
    def failed(self) -> None:
        """Frame copy failed

        This event indicates that the attempted frame copy has failed.

        After receiving this event, the client should destroy the object.
        """
        self._post_event(3)

    @ZwlrScreencopyFrameV1.event(
        Argument(ArgumentType.Uint),
        Argument(ArgumentType.Uint),
        Argument(ArgumentType.Uint),
        Argument(ArgumentType.Uint),
        version=2,
    )
    def damage(self, x: int, y: int, width: int, height: int) -> None:
        """Carries the coordinates of the damaged region

        This event is sent right before the ready event when copy_with_damage
        is requested. It may be generated multiple times for each
        copy_with_damage request.

        The arguments describe a box around an area that has changed since the
        last copy request that was derived from the current screencopy manager
        instance.

        The union of all regions received between the call to copy_with_damage
        and a ready event is the total damage since the prior ready event.

        :param x:
            damaged x coordinates
        :type x:
            `ArgumentType.Uint`
        :param y:
            damaged y coordinates
        :type y:
            `ArgumentType.Uint`
        :param width:
            current width
        :type width:
            `ArgumentType.Uint`
        :param height:
            current height
        :type height:
            `ArgumentType.Uint`
        """
        self._post_event(4, x, y, width, height)

    @ZwlrScreencopyFrameV1.event(
        Argument(ArgumentType.Uint),
        Argument(ArgumentType.Uint),
        Argument(ArgumentType.Uint),
        version=3,
    )
    def linux_dmabuf(self, format: int, width: int, height: int) -> None:
        """Linux-dmabuf buffer information

        Provides information about linux-dmabuf buffer parameters that need to
        be used for this frame. This event is sent once after the frame is
        created if linux-dmabuf buffers are supported.

        :param format:
            fourcc pixel format
        :type format:
            `ArgumentType.Uint`
        :param width:
            buffer width
        :type width:
            `ArgumentType.Uint`
        :param height:
            buffer height
        :type height:
            `ArgumentType.Uint`
        """
        self._post_event(5, format, width, height)

    @ZwlrScreencopyFrameV1.event(version=3)
    def buffer_done(self) -> None:
        """All buffer types reported

        This event is sent once after all buffer events have been sent.

        The client should proceed to create a buffer of one of the supported
        types, and send a "copy" request.
        """
        self._post_event(6)


class ZwlrScreencopyFrameV1Global(Global):
    interface = ZwlrScreencopyFrameV1


ZwlrScreencopyFrameV1._gen_c()
ZwlrScreencopyFrameV1.proxy_class = ZwlrScreencopyFrameV1Proxy
ZwlrScreencopyFrameV1.resource_class = ZwlrScreencopyFrameV1Resource
ZwlrScreencopyFrameV1.global_class = ZwlrScreencopyFrameV1Global
