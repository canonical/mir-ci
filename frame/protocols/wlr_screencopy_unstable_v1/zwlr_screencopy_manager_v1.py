# This file has been autogenerated by the pywayland scanner

# Copyright © 2018 Simon Ser
# Copyright © 2019 Andri Yngvason
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice (including the next
# paragraph) shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

from __future__ import annotations


from pywayland.protocol_core import (
    Argument,
    ArgumentType,
    Global,
    Interface,
    Proxy,
    Resource,
)
from ..wayland import WlOutput
from .zwlr_screencopy_frame_v1 import ZwlrScreencopyFrameV1


class ZwlrScreencopyManagerV1(Interface):
    """Manager to inform clients and begin capturing

    This object is a manager which offers requests to start capturing from a
    source.
    """

    name = "zwlr_screencopy_manager_v1"
    version = 3


class ZwlrScreencopyManagerV1Proxy(Proxy[ZwlrScreencopyManagerV1]):
    interface = ZwlrScreencopyManagerV1

    @ZwlrScreencopyManagerV1.request(
        Argument(ArgumentType.NewId, interface=ZwlrScreencopyFrameV1),
        Argument(ArgumentType.Int),
        Argument(ArgumentType.Object, interface=WlOutput),
    )
    def capture_output(self, overlay_cursor: int, output: WlOutput) -> Proxy[ZwlrScreencopyFrameV1]:
        """Capture an output

        Capture the next frame of an entire output.

        :param overlay_cursor:
            composite cursor onto the frame
        :type overlay_cursor:
            `ArgumentType.Int`
        :param output:
        :type output:
            :class:`~pywayland.protocol.wayland.WlOutput`
        :returns:
            :class:`~pywayland.protocol.wlr_screencopy_unstable_v1.ZwlrScreencopyFrameV1`
        """
        frame = self._marshal_constructor(0, ZwlrScreencopyFrameV1, overlay_cursor, output)
        return frame

    @ZwlrScreencopyManagerV1.request(
        Argument(ArgumentType.NewId, interface=ZwlrScreencopyFrameV1),
        Argument(ArgumentType.Int),
        Argument(ArgumentType.Object, interface=WlOutput),
        Argument(ArgumentType.Int),
        Argument(ArgumentType.Int),
        Argument(ArgumentType.Int),
        Argument(ArgumentType.Int),
    )
    def capture_output_region(self, overlay_cursor: int, output: WlOutput, x: int, y: int, width: int, height: int) -> Proxy[ZwlrScreencopyFrameV1]:
        """Capture an output's region

        Capture the next frame of an output's region.

        The region is given in output logical coordinates, see
        xdg_output.logical_size. The region will be clipped to the output's
        extents.

        :param overlay_cursor:
            composite cursor onto the frame
        :type overlay_cursor:
            `ArgumentType.Int`
        :param output:
        :type output:
            :class:`~pywayland.protocol.wayland.WlOutput`
        :param x:
        :type x:
            `ArgumentType.Int`
        :param y:
        :type y:
            `ArgumentType.Int`
        :param width:
        :type width:
            `ArgumentType.Int`
        :param height:
        :type height:
            `ArgumentType.Int`
        :returns:
            :class:`~pywayland.protocol.wlr_screencopy_unstable_v1.ZwlrScreencopyFrameV1`
        """
        frame = self._marshal_constructor(1, ZwlrScreencopyFrameV1, overlay_cursor, output, x, y, width, height)
        return frame

    @ZwlrScreencopyManagerV1.request()
    def destroy(self) -> None:
        """Destroy the manager

        All objects created by the manager will still remain valid, until their
        appropriate destroy request has been called.
        """
        self._marshal(2)
        self._destroy()


class ZwlrScreencopyManagerV1Resource(Resource):
    interface = ZwlrScreencopyManagerV1


class ZwlrScreencopyManagerV1Global(Global):
    interface = ZwlrScreencopyManagerV1


ZwlrScreencopyManagerV1._gen_c()
ZwlrScreencopyManagerV1.proxy_class = ZwlrScreencopyManagerV1Proxy
ZwlrScreencopyManagerV1.resource_class = ZwlrScreencopyManagerV1Resource
ZwlrScreencopyManagerV1.global_class = ZwlrScreencopyManagerV1Global
