# This file has been autogenerated by the pywayland scanner

# Copyright Â© 2019 Josef Gajdusek
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice (including the next
# paragraph) shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

from __future__ import annotations


from pywayland.protocol_core import (
    Argument,
    ArgumentType,
    Global,
    Interface,
    Proxy,
    Resource,
)
from ..wayland import WlOutput
from ..wayland import WlSeat
from .zwlr_virtual_pointer_v1 import ZwlrVirtualPointerV1


class ZwlrVirtualPointerManagerV1(Interface):
    """Virtual pointer manager

    This object allows clients to create individual virtual pointer objects.
    """

    name = "zwlr_virtual_pointer_manager_v1"
    version = 2


class ZwlrVirtualPointerManagerV1Proxy(Proxy[ZwlrVirtualPointerManagerV1]):
    interface = ZwlrVirtualPointerManagerV1

    @ZwlrVirtualPointerManagerV1.request(
        Argument(ArgumentType.Object, interface=WlSeat, nullable=True),
        Argument(ArgumentType.NewId, interface=ZwlrVirtualPointerV1),
    )
    def create_virtual_pointer(self, seat: WlSeat | None) -> Proxy[ZwlrVirtualPointerV1]:
        """Create a new virtual pointer

        Creates a new virtual pointer. The optional seat is a suggestion to the
        compositor.

        :param seat:
        :type seat:
            :class:`~pywayland.protocol.wayland.WlSeat` or `None`
        :returns:
            :class:`~pywayland.protocol.wlr_virtual_pointer_unstable_v1.ZwlrVirtualPointerV1`
        """
        id = self._marshal_constructor(0, ZwlrVirtualPointerV1, seat)
        return id

    @ZwlrVirtualPointerManagerV1.request(version=1)
    def destroy(self) -> None:
        """Destroy the virtual pointer manager
        """
        self._marshal(1)
        self._destroy()

    @ZwlrVirtualPointerManagerV1.request(
        Argument(ArgumentType.Object, interface=WlSeat, nullable=True),
        Argument(ArgumentType.Object, interface=WlOutput, nullable=True),
        Argument(ArgumentType.NewId, interface=ZwlrVirtualPointerV1),
        version=2,
    )
    def create_virtual_pointer_with_output(self, seat: WlSeat | None, output: WlOutput | None) -> Proxy[ZwlrVirtualPointerV1]:
        """Create a new virtual pointer

        Creates a new virtual pointer. The seat and the output arguments are
        optional. If the seat argument is set, the compositor should assign the
        input device to the requested seat. If the output argument is set, the
        compositor should map the input device to the requested output.

        :param seat:
        :type seat:
            :class:`~pywayland.protocol.wayland.WlSeat` or `None`
        :param output:
        :type output:
            :class:`~pywayland.protocol.wayland.WlOutput` or `None`
        :returns:
            :class:`~pywayland.protocol.wlr_virtual_pointer_unstable_v1.ZwlrVirtualPointerV1`
        """
        id = self._marshal_constructor(2, ZwlrVirtualPointerV1, seat, output)
        return id


class ZwlrVirtualPointerManagerV1Resource(Resource):
    interface = ZwlrVirtualPointerManagerV1


class ZwlrVirtualPointerManagerV1Global(Global):
    interface = ZwlrVirtualPointerManagerV1


ZwlrVirtualPointerManagerV1._gen_c()
ZwlrVirtualPointerManagerV1.proxy_class = ZwlrVirtualPointerManagerV1Proxy
ZwlrVirtualPointerManagerV1.resource_class = ZwlrVirtualPointerManagerV1Resource
ZwlrVirtualPointerManagerV1.global_class = ZwlrVirtualPointerManagerV1Global
