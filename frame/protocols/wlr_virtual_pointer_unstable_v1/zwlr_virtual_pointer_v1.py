# This file has been autogenerated by the pywayland scanner

# Copyright Â© 2019 Josef Gajdusek
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice (including the next
# paragraph) shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

from __future__ import annotations

import enum

from pywayland.protocol_core import (
    Argument,
    ArgumentType,
    Global,
    Interface,
    Proxy,
    Resource,
)


class ZwlrVirtualPointerV1(Interface):
    """Virtual pointer

    This protocol allows clients to emulate a physical pointer device. The
    requests are mostly mirror opposites of those specified in
    :class:`~pywayland.protocol.wayland.WlPointer`.
    """

    name = "zwlr_virtual_pointer_v1"
    version = 2

    class error(enum.IntEnum):
        invalid_axis = 0
        invalid_axis_source = 1


class ZwlrVirtualPointerV1Proxy(Proxy[ZwlrVirtualPointerV1]):
    interface = ZwlrVirtualPointerV1

    @ZwlrVirtualPointerV1.request(
        Argument(ArgumentType.Uint),
        Argument(ArgumentType.Fixed),
        Argument(ArgumentType.Fixed),
    )
    def motion(self, time: int, dx: float, dy: float) -> None:
        """Pointer relative motion event

        The pointer has moved by a relative amount to the previous request.

        Values are in the global compositor space.

        :param time:
            timestamp with millisecond granularity
        :type time:
            `ArgumentType.Uint`
        :param dx:
            displacement on the x-axis
        :type dx:
            `ArgumentType.Fixed`
        :param dy:
            displacement on the y-axis
        :type dy:
            `ArgumentType.Fixed`
        """
        self._marshal(0, time, dx, dy)

    @ZwlrVirtualPointerV1.request(
        Argument(ArgumentType.Uint),
        Argument(ArgumentType.Uint),
        Argument(ArgumentType.Uint),
        Argument(ArgumentType.Uint),
        Argument(ArgumentType.Uint),
    )
    def motion_absolute(self, time: int, x: int, y: int, x_extent: int, y_extent: int) -> None:
        """Pointer absolute motion event

        The pointer has moved in an absolute coordinate frame.

        Value of x can range from 0 to x_extent, value of y can range from 0 to
        y_extent.

        :param time:
            timestamp with millisecond granularity
        :type time:
            `ArgumentType.Uint`
        :param x:
            position on the x-axis
        :type x:
            `ArgumentType.Uint`
        :param y:
            position on the y-axis
        :type y:
            `ArgumentType.Uint`
        :param x_extent:
            extent of the x-axis
        :type x_extent:
            `ArgumentType.Uint`
        :param y_extent:
            extent of the y-axis
        :type y_extent:
            `ArgumentType.Uint`
        """
        self._marshal(1, time, x, y, x_extent, y_extent)

    @ZwlrVirtualPointerV1.request(
        Argument(ArgumentType.Uint),
        Argument(ArgumentType.Uint),
        Argument(ArgumentType.Uint),
    )
    def button(self, time: int, button: int, state: int) -> None:
        """Button event

        A button was pressed or released.

        :param time:
            timestamp with millisecond granularity
        :type time:
            `ArgumentType.Uint`
        :param button:
            button that produced the event
        :type button:
            `ArgumentType.Uint`
        :param state:
            physical state of the button
        :type state:
            `ArgumentType.Uint`
        """
        self._marshal(2, time, button, state)

    @ZwlrVirtualPointerV1.request(
        Argument(ArgumentType.Uint),
        Argument(ArgumentType.Uint),
        Argument(ArgumentType.Fixed),
    )
    def axis(self, time: int, axis: int, value: float) -> None:
        """Axis event

        Scroll and other axis requests.

        :param time:
            timestamp with millisecond granularity
        :type time:
            `ArgumentType.Uint`
        :param axis:
            axis type
        :type axis:
            `ArgumentType.Uint`
        :param value:
            length of vector in touchpad coordinates
        :type value:
            `ArgumentType.Fixed`
        """
        self._marshal(3, time, axis, value)

    @ZwlrVirtualPointerV1.request()
    def frame(self) -> None:
        """End of a pointer event sequence

        Indicates the set of events that logically belong together.
        """
        self._marshal(4)

    @ZwlrVirtualPointerV1.request(
        Argument(ArgumentType.Uint),
    )
    def axis_source(self, axis_source: int) -> None:
        """Axis source event

        Source information for scroll and other axis.

        :param axis_source:
            source of the axis event
        :type axis_source:
            `ArgumentType.Uint`
        """
        self._marshal(5, axis_source)

    @ZwlrVirtualPointerV1.request(
        Argument(ArgumentType.Uint),
        Argument(ArgumentType.Uint),
    )
    def axis_stop(self, time: int, axis: int) -> None:
        """Axis stop event

        Stop notification for scroll and other axes.

        :param time:
            timestamp with millisecond granularity
        :type time:
            `ArgumentType.Uint`
        :param axis:
            the axis stopped with this event
        :type axis:
            `ArgumentType.Uint`
        """
        self._marshal(6, time, axis)

    @ZwlrVirtualPointerV1.request(
        Argument(ArgumentType.Uint),
        Argument(ArgumentType.Uint),
        Argument(ArgumentType.Fixed),
        Argument(ArgumentType.Int),
    )
    def axis_discrete(self, time: int, axis: int, value: float, discrete: int) -> None:
        """Axis click event

        Discrete step information for scroll and other axes.

        This event allows the client to extend data normally sent using the
        axis event with discrete value.

        :param time:
            timestamp with millisecond granularity
        :type time:
            `ArgumentType.Uint`
        :param axis:
            axis type
        :type axis:
            `ArgumentType.Uint`
        :param value:
            length of vector in touchpad coordinates
        :type value:
            `ArgumentType.Fixed`
        :param discrete:
            number of steps
        :type discrete:
            `ArgumentType.Int`
        """
        self._marshal(7, time, axis, value, discrete)

    @ZwlrVirtualPointerV1.request(version=1)
    def destroy(self) -> None:
        """Destroy the virtual pointer object
        """
        self._marshal(8)
        self._destroy()


class ZwlrVirtualPointerV1Resource(Resource):
    interface = ZwlrVirtualPointerV1


class ZwlrVirtualPointerV1Global(Global):
    interface = ZwlrVirtualPointerV1


ZwlrVirtualPointerV1._gen_c()
ZwlrVirtualPointerV1.proxy_class = ZwlrVirtualPointerV1Proxy
ZwlrVirtualPointerV1.resource_class = ZwlrVirtualPointerV1Resource
ZwlrVirtualPointerV1.global_class = ZwlrVirtualPointerV1Global
