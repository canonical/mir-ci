# This file has been autogenerated by the pywayland scanner

# Copyright © 2008-2011  Kristian Høgsberg
# Copyright © 2010-2013  Intel Corporation
# Copyright © 2012-2013  Collabora, Ltd.
# Copyright © 2018       Purism SPC
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice (including the next
# paragraph) shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

from __future__ import annotations

import enum

from pywayland.protocol_core import (
    Argument,
    ArgumentType,
    Global,
    Interface,
    Proxy,
    Resource,
)


class ZwpVirtualKeyboardV1(Interface):
    """Virtual keyboard

    The virtual keyboard provides an application with requests which emulate
    the behaviour of a physical keyboard.

    This interface can be used by clients on its own to provide raw input
    events, or it can accompany the input method protocol.
    """

    name = "zwp_virtual_keyboard_v1"
    version = 1

    class error(enum.IntEnum):
        no_keymap = 0


class ZwpVirtualKeyboardV1Proxy(Proxy[ZwpVirtualKeyboardV1]):
    interface = ZwpVirtualKeyboardV1

    @ZwpVirtualKeyboardV1.request(
        Argument(ArgumentType.Uint),
        Argument(ArgumentType.FileDescriptor),
        Argument(ArgumentType.Uint),
    )
    def keymap(self, format: int, fd: int, size: int) -> None:
        """Keyboard mapping

        Provide a file descriptor to the compositor which can be memory-mapped
        to provide a keyboard mapping description.

        Format carries a value from the keymap_format enumeration.

        :param format:
            keymap format
        :type format:
            `ArgumentType.Uint`
        :param fd:
            keymap file descriptor
        :type fd:
            `ArgumentType.FileDescriptor`
        :param size:
            keymap size, in bytes
        :type size:
            `ArgumentType.Uint`
        """
        self._marshal(0, format, fd, size)

    @ZwpVirtualKeyboardV1.request(
        Argument(ArgumentType.Uint),
        Argument(ArgumentType.Uint),
        Argument(ArgumentType.Uint),
    )
    def key(self, time: int, key: int, state: int) -> None:
        """Key event

        A key was pressed or released. The time argument is a timestamp with
        millisecond granularity, with an undefined base. All requests regarding
        a single object must share the same clock.

        Keymap must be set before issuing this request.

        State carries a value from the key_state enumeration.

        :param time:
            timestamp with millisecond granularity
        :type time:
            `ArgumentType.Uint`
        :param key:
            key that produced the event
        :type key:
            `ArgumentType.Uint`
        :param state:
            physical state of the key
        :type state:
            `ArgumentType.Uint`
        """
        self._marshal(1, time, key, state)

    @ZwpVirtualKeyboardV1.request(
        Argument(ArgumentType.Uint),
        Argument(ArgumentType.Uint),
        Argument(ArgumentType.Uint),
        Argument(ArgumentType.Uint),
    )
    def modifiers(self, mods_depressed: int, mods_latched: int, mods_locked: int, group: int) -> None:
        """Modifier and group state

        Notifies the compositor that the modifier and/or group state has
        changed, and it should update state.

        The client should use :func:`WlKeyboard.modifiers()
        <pywayland.protocol.wayland.WlKeyboard.modifiers>` event to synchronize
        its internal state with seat state.

        Keymap must be set before issuing this request.

        :param mods_depressed:
            depressed modifiers
        :type mods_depressed:
            `ArgumentType.Uint`
        :param mods_latched:
            latched modifiers
        :type mods_latched:
            `ArgumentType.Uint`
        :param mods_locked:
            locked modifiers
        :type mods_locked:
            `ArgumentType.Uint`
        :param group:
            keyboard layout
        :type group:
            `ArgumentType.Uint`
        """
        self._marshal(2, mods_depressed, mods_latched, mods_locked, group)

    @ZwpVirtualKeyboardV1.request(version=1)
    def destroy(self) -> None:
        """Destroy the virtual keyboard keyboard object
        """
        self._marshal(3)
        self._destroy()


class ZwpVirtualKeyboardV1Resource(Resource):
    interface = ZwpVirtualKeyboardV1


class ZwpVirtualKeyboardV1Global(Global):
    interface = ZwpVirtualKeyboardV1


ZwpVirtualKeyboardV1._gen_c()
ZwpVirtualKeyboardV1.proxy_class = ZwpVirtualKeyboardV1Proxy
ZwpVirtualKeyboardV1.resource_class = ZwpVirtualKeyboardV1Resource
ZwpVirtualKeyboardV1.global_class = ZwpVirtualKeyboardV1Global
