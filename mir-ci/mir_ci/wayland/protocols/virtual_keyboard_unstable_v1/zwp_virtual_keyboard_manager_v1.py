# This file has been autogenerated by the pywayland scanner

# Copyright © 2008-2011  Kristian Høgsberg
# Copyright © 2010-2013  Intel Corporation
# Copyright © 2012-2013  Collabora, Ltd.
# Copyright © 2018       Purism SPC
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice (including the next
# paragraph) shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

from __future__ import annotations

import enum

from pywayland.protocol_core import (
    Argument,
    ArgumentType,
    Global,
    Interface,
    Proxy,
    Resource,
)

from ..wayland import WlSeat
from .zwp_virtual_keyboard_v1 import ZwpVirtualKeyboardV1


class ZwpVirtualKeyboardManagerV1(Interface):
    """Virtual keyboard manager

    A virtual keyboard manager allows an application to provide keyboard input
    events as if they came from a physical keyboard.
    """

    name = "zwp_virtual_keyboard_manager_v1"
    version = 1

    class error(enum.IntEnum):
        unauthorized = 0


class ZwpVirtualKeyboardManagerV1Proxy(Proxy[ZwpVirtualKeyboardManagerV1]):
    interface = ZwpVirtualKeyboardManagerV1

    @ZwpVirtualKeyboardManagerV1.request(
        Argument(ArgumentType.Object, interface=WlSeat),
        Argument(ArgumentType.NewId, interface=ZwpVirtualKeyboardV1),
    )
    def create_virtual_keyboard(self, seat: WlSeat) -> Proxy[ZwpVirtualKeyboardV1]:
        """Create a new virtual keyboard

        Creates a new virtual keyboard associated to a seat.

        If the compositor enables a keyboard to perform arbitrary actions, it
        should present an error when an untrusted client requests a new
        keyboard.

        :param seat:
        :type seat:
            :class:`~pywayland.protocol.wayland.WlSeat`
        :returns:
            :class:`~pywayland.protocol.virtual_keyboard_unstable_v1.ZwpVirtualKeyboardV1`
        """
        id = self._marshal_constructor(0, ZwpVirtualKeyboardV1, seat)
        return id


class ZwpVirtualKeyboardManagerV1Resource(Resource):
    interface = ZwpVirtualKeyboardManagerV1


class ZwpVirtualKeyboardManagerV1Global(Global):
    interface = ZwpVirtualKeyboardManagerV1


ZwpVirtualKeyboardManagerV1._gen_c()
ZwpVirtualKeyboardManagerV1.proxy_class = ZwpVirtualKeyboardManagerV1Proxy
ZwpVirtualKeyboardManagerV1.resource_class = ZwpVirtualKeyboardManagerV1Resource
ZwpVirtualKeyboardManagerV1.global_class = ZwpVirtualKeyboardManagerV1Global
